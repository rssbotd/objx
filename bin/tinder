#!/usr/bin/env python3
# This file is placed in the Public Domain.
# pylint: disable=C0413,R0903,R0912,W0105,W0201,W0718


"commands"


import io
import os
import shutil
import sys
import termios
import time
import traceback
import _thread


sys.path.insert(0, os.getcwd())


from objx.default import Default
from objx.object  import Object, fmt, keys
from objx.persist import Persist, find, long, skel, sync, types
from objx.utility import fntime, laps


"config"


class Config(Default):

    "configuration"


"errors"


class Errors:

    "Errors"

    errors = []

    @staticmethod
    def format(exc):
        "format an exception"
        res = ""
        stream = io.StringIO(
                             traceback.print_exception(
                                                       type(exc),
                                                       exc,
                                                       exc.__traceback__
                                                      )
                            )
        for line in stream.readlines():
            res += line + "\n"
        return res


def errors():
    "show exceptions"
    for exc in Errors.errors:
        print(Errors.format(exc))


def later(exc):
    "add an exception"
    excp = exc.with_traceback(exc.__traceback__)
    Errors.errors.append(excp)


"event"


class Event(Default):

    "Result"

    def __init__(self):
        Default.__init__(self)
        self.result  = []
        self.txt     = ""

    def reply(self, txt):
        "add text to the result"
        self.result.append(txt)


"commands"


class Commands:

    "Commands"

    cmds = Object()

    @staticmethod
    def add(func):
        "add command."
        setattr(Commands.cmds, func.__name__, func)


def command(evt):
    "check for and run a command."
    parse(evt)
    func = getattr(Commands.cmds, evt.cmd, None)
    if func:
        try:
            func(evt)
        except Exception as ex:
            later(ex)


"parse"


def parse(obj, txt=None):
    "parse a string for a command."
    args = []
    _nr = -1
    obj.otxt = txt or obj.otxt or obj.txt
    for spli in obj.otxt.split():
        if spli.startswith("-"):
            try:
                obj.index = int(spli[1:])
            except ValueError:
                obj.opts += spli[1:]
            continue
        if "==" in spli:
            key, value = spli.split("==", maxsplit=1)
            if not obj.gets:
                obj.gets = Default()
            if key in obj.gets:
                val = getattr(obj.gets, key)
                value = val + "," + value
            setattr(obj.gets, key, value)
            continue
        if "=" in spli:
            key, value = spli.split("=", maxsplit=1)
            if key == "mod":
                obj.hasmods = True
                if obj.mod:
                    obj.mod += f",{value}"
                else:
                    obj.mod = value
                continue
            if not obj.gets:
                obj.gets = Default()
            setattr(obj.sets, key, value)
            continue
        _nr += 1
        if _nr == 0:
            obj.cmd = spli
            continue
        args.append(spli)
    if args:
        obj.args = args
        obj.txt  = obj.cmd or ""
        obj.rest = " ".join(obj.args)
        obj.txt  = obj.cmd + " " + obj.rest
    else:
        obj.txt = obj.cmd or ""



"runtime"


Cfg         = Config()
Cfg.name    = Object.__module__.rsplit(".", maxsplit=1)[-2]
Cfg.wdr     = os.path.expanduser(f"~/.{Cfg.name}")
Cfg.pidfile = os.path.join(Cfg.wdr, f"{Cfg.name}.pid")


Persist.workdir = Cfg.wdr


class Log(Object):

    "Log"

    def __init__(self):
        super().__init__()
        self.txt = ''


def cmd(event):
    "list commands."
    event.reply(",".join(sorted(keys(Commands.cmds))))


def fnd(event):
    "locate objects."
    skel()
    if not event.rest:
        res = sorted([x.split('.')[-1].lower() for x in types()])
        if res:
            event.reply(",".join(res))
        return
    otype = long(event.args[0])
    nmr = 0
    for fnm, obj in find(otype, event.gets):
        event.reply(f"{nmr} {fmt(obj)} {laps(time.time()-fntime(fnm))}")
        nmr += 1
    if not nmr:
        event.reply("no result")


def log(event):
    "log text."
    if not event.rest:
        nmr = 0
        for fnm, obj in find('log'):
            lap = laps(time.time() - fntime(fnm))
            event.reply(f'{nmr} {obj.txt} {lap}')
            nmr += 1
        if not nmr:
            event.reply('no log')
        return
    obj = Log()
    obj.txt = event.rest
    sync(obj)
    event.reply('ok')


"tinder"


LAP = 1
NRS = 1
NRCOMMAND = 1
PERCALL   = 1
STARTTIME = time.time()


paylock = _thread.allocate_lock()


param = Object()
param.cmd = [""]
param.fnd = ["log", "todo", "rss", "config"]
param.log = ["bla"]


def payload():
    "do payload."
    cmdz = Commands.cmds
    with paylock:
        nmr = 0
        for cmdd in cmdz:
            for ex in getattr(param, cmdd, [""]):
                evt = Event()
                evt.channel = "#nixt"
                evt.txt = cmdd + " " + ex
                command(evt)
                if "v" not in Cfg.opts:
                    continue
                for text in evt.result:
                    print(text)
                nmr += 1
        return nmr


def wrap(function):
    "reset terminal."
    old2 = None
    try:
        old2 = termios.tcgetattr(sys.stdin.fileno())
    except termios.error:
        pass
    try:
        function()
    except (KeyboardInterrupt, EOFError):
        print("")
    finally:
        if old2:
            termios.tcsetattr(sys.stdin.fileno(), termios.TCSADRAIN, old2)


def main():
    "main"
    if "v" in Cfg.opts:
        dte = " ".join(time.ctime(time.time()).replace("  ", " ").split()[1:])
        print(f'{dte} {Cfg.name.upper()} {Cfg.opts.upper()} {Cfg.mod.upper()}'.replace("  ", " "))
    nrs = Cfg.index or 1
    nrcommand = len(Commands.cmds) or 1
    for _nr in range(nrs):
        payload()
    endtime = time.time()
    lap = laps(endtime-STARTTIME)
    percall = (endtime-STARTTIME)/(nrs*nrcommand)
    if "v" in Cfg.opts:
        print(f"{lap} {nrs} {nrcommand} {percall}")


if __name__ == "__main__":
    parse(Cfg, " ".join(sys.argv[1:]))
    Commands.add(cmd)
    Commands.add(fnd)
    Commands.add(log)
    if "f" in Cfg.opts:
        if os.path.exists(Persist.workdir):
            shutil.rmtree(Persist.workdir)
    skel()
    if "p" in Cfg.opts:
        profile.runctx(main.__code__, globals(), locals())
    else:
        wrap(main)
    errors()
    sys.exit()
